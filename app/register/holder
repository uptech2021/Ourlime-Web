'use client';

import { uploadFile } from '@/helpers/firebaseStorage';
import { auth, db } from '@/lib/firebaseConfig';
import {
    createUserWithEmailAndPassword,
    onAuthStateChanged,
    User
} from 'firebase/auth';
import { addDoc, collection, doc, getDoc, getDocs, increment, query, setDoc, updateDoc, where } from 'firebase/firestore';
import { gsap } from 'gsap';
import { useRouter } from 'next/navigation';
import { useEffect, useRef, useState } from 'react';
import { isValidPhoneNumber } from 'react-phone-number-input';
import 'react-phone-number-input/style.css';

// Component imports
import AnimatedLogo from '@/components/AnimatedLoader';
import Authentication from '@/components/register/Authentication';
import FirstStep from '@/components/register/FirstStep';
import FourthStep from '@/components/register/FourthStep';
import SecondStep from '@/components/register/SecondStep';
import SecondStepOptional from '@/components/register/SecondStepOptional';
import SixthStep from '@/components/register/SixthStep';
import ThirdStep from '@/components/register/ThirdStep';
import { EmailVerificationService, UserService } from '@/helpers/Auth';

interface SelectedFiles {
    profile: File | null;
    cover: File | null;
}

export default function Page() {
    // Navigation and Step Control
    const [step, setStep] = useState(1);
    const [prevStep, setPrevStep] = useState(1);
    const router = useRouter();
    let newUser: User | null = null;

    // User Information States
    const [firstName, setFirstName] = useState('');
    const [lastName, setLastName] = useState('');
    const [userName, setUserName] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [gender, setGender] = useState('');
    const [birthday, setBirthday] = useState('');
    const [country, setCountry] = useState('');
    const [phone, setPhone] = useState('');
    const [city, setCity] = useState('');
    const [postalCode, setPostalCode] = useState('');
    const [Address, setAddress] = useState('');
    const [zipCode, SetZipCode] = useState('');
    const [profilePicture, setProfilePicture] = useState('');
    const [selectedInterests, setSelectedInterests] = useState<string[]>([]);

    // Avatar Selection States
    const [selectedCartoonAvatarBlackBoy, setSelectedCartoonAvatarBlackBoy] = useState(false);
    const [selectedCartoonAvatarWhiteBoy, setSelectedCartoonAvatarWhiteBoy] = useState(false);
    const [selectedCartoonAvatarBlackGirl, setSelectedCartoonAvatarBlackGirl] = useState(false);
    const [selectedCartoonAvatarWhiteGirl, setSelectedCartoonAvatarWhiteGirl] = useState(false);
    const [selectedRealisticAvatarWhiteMan, setSelectedRealisticAvatarWhiteMan] = useState(false);
    const [selectedRealisticAvatarBlackWoman, setSelectedRealisticAvatarBlackWoman] = useState(false);

    // Error States
    const [firstNameError, setFirstNameError] = useState('');
    const [lastNameError, setLastNameError] = useState('');
    const [userNameError, setUserNameError] = useState('');
    const [emailError, setEmailError] = useState('');
    const [passwordError, setPasswordError] = useState('');
    const [confirmPasswordError, setConfirmPasswordError] = useState('');
    const [genderError, setGenderError] = useState('');
    const [birthdayError, setBirthdayError] = useState('');
    const [countryError, setCountryError] = useState('');
    const [phoneError, setPhoneError] = useState('');
    const [cityError, setCityError] = useState('');
    const [postalCodeError, setPostalCodeError] = useState('');
    const [AddressError, setAddressError] = useState('');
    const [zipCodeError, setZipCodeError] = useState('');
    const [emailExistsError, setEmailExistsError] = useState('');
    const [userExistsError, setUserExistsError] = useState('');
    const [error, setError] = useState('');

	    // Authentication and Verification States
		const [isAuthenticated, setIsAuthenticated] = useState(false);
		const [isVerified, setIsVerified] = useState(false);
		const [verificationMessage, setVerificationMessage] = useState('');
		const [user, setUser] = useState<User | null>(null);
		const [loading, setLoading] = useState(true);
		const [isStep3Valid, setIsStep3Valid] = useState(false);
		const [isStep5Valid, setIsStep5Valid] = useState(false);
		const [isStepValid, setIsStepValid] = useState(false);
		const [validationError, setValidationError] = useState('');
		const [successMessage, setSuccessMessage] = useState('');
		const [contactExistsError, setContactExistsError] = useState('');
	
		// File Upload States and Refs
		const [idFaceRef] = useState<React.RefObject<HTMLInputElement>>(useRef(null));
		const [idFrontRef] = useState<React.RefObject<HTMLInputElement>>(useRef(null));
		const [idBackRef] = useState<React.RefObject<HTMLInputElement>>(useRef(null));
		const [faceFileName, setFaceFileName] = useState('');
		const [frontFileName, setFrontFileName] = useState('');
		const [backFileName, setBackFileName] = useState('');
		const [faceFileError, setFaceFileError] = useState('');
		const [frontFileError, setFrontFileError] = useState('');
		const [backFileError, setBackFileError] = useState('');
	
		const [selectedFiles, setSelectedFiles] = useState<SelectedFiles>({
			profile: null,
			cover: null
		});
	
		// Effects and Validation Functions
		useEffect(() => {
			const validateStep6 = () => {
				let formValid = true;
	
				if (!faceFileName) {
					setFaceFileError('Please upload a photo of yourself holding your ID next to your face.');
					formValid = false;
				} else {
					setFaceFileError('');
				}
	
				if (!frontFileName) {
					setFrontFileError('Please upload a photo of the front of your ID.');
					formValid = false;
				} else {
					setFrontFileError('');
				}
	
				if (!backFileName) {
					setBackFileError('Please upload a photo of the back of your ID.');
					formValid = false;
				} else {
					setBackFileError('');
				}
				return formValid;
			};
	
			const valid = validateStep6();
			setIsStepValid(valid);
		}, [faceFileName, frontFileName, backFileName]);

		    // Authentication Check Effect
			useEffect(() => {
				const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
					setUser(currentUser);
					setLoading(false);
				});
				return () => unsubscribe();
			}, []);
		
			useEffect(() => {
				if (user) {
					router.push('/');
				}
			}, [user, router]);
		
			// Step Animation Effect
			useEffect(() => {
				if (step > prevStep) {
					animateStepForward(step);
				} else if (step < prevStep) {
					animateStepBackward(step);
				}
				setPrevStep(step);
			}, [step, prevStep]);
		
			const handleRegister = async (e: React.FormEvent) => {
				e.preventDefault();
				console.log('Starting registration process...');
		
				try {
					// Create new user with email and password
					const userCredential = await createUserWithEmailAndPassword(auth, email, password);
					const user = userCredential.user;
					
					// Send verification email
					await EmailVerificationService.verifyEmail(user);
		
					// Create user document
					await setDoc(doc(db, 'users', user.uid), {
						firstName,
						lastName,
						userName,
						email: user.email,
						emailVerified: false,
						gender,
						birthday,
						country,
						isAdmin: false,
						last_loggedIn: new Date(),
						userTier: 1,
						createdAt: new Date(),
						interests: selectedInterests
					});
		
					// Create address documents
					const addressRef = doc(collection(db, 'addresses'));
					await setDoc(addressRef, {
						userId: user.uid,
						Address,
						city,
						postalCode,
						zipCode,
						createdAt: new Date(),
						updatedAt: new Date()
					});
		
					await setDoc(doc(collection(db, 'addressSetAs')), {
						setAs: 'home',
						addressId: addressRef.id
					});
		
					// Handle profile and cover images
					const profileImageRef = doc(collection(db, 'profileImages'));
					const coverImageRef = doc(collection(db, 'profileImages'));

					            // Upload profile image
								const profileImageURL = selectedFiles.profile
								? await uploadFile(selectedFiles.profile, `profiles/${user.uid}/profile`)
								: await uploadFile(
									new File(
										[await fetch(`/images/register/${profilePicture}`).then(res => res.blob())],
										profilePicture,
										{ type: 'image/svg+xml' }
									),
									`profiles/${user.uid}/${profilePicture}`
								);
				
							// Upload cover image if exists
							const coverImageURL = selectedFiles.cover
								? await uploadFile(selectedFiles.cover, `profiles/${user.uid}/cover`)
								: null;
				
							// Create profile image documents
							await setDoc(profileImageRef, {
								imageURL: profileImageURL,
								typeOfImage: 'profile',
								userId: user.uid,
								createdAt: new Date(),
								updatedAt: new Date()
							});
				
							await setDoc(doc(collection(db, 'profileImageSetAs')), {
								setAs: 'profile',
								profileImageId: profileImageRef.id,
								userId: user.uid
							});
				
							if (coverImageURL) {
								await setDoc(coverImageRef, {
									imageURL: coverImageURL,
									typeOfImage: 'cover',
									userId: user.uid,
									createdAt: new Date(),
									updatedAt: new Date()
								});
				
								await setDoc(doc(collection(db, 'profileImageSetAs')), {
									setAs: 'coverProfile',
									profileImageId: coverImageRef.id,
									userId: user.uid
								});
							}
				
							// Create contact document
							const contactRef = doc(collection(db, 'contact'));
							await setDoc(contactRef, {
								userId: user.uid,
								contactNumber: phone,
								isVerified: false,
								createdAt: new Date(),
								updatedAt: new Date()
							});
				
							await setDoc(doc(collection(db, 'contactSetAs')), {
								setAs: 'personal',
								contactId: contactRef.id
							});
				
							// Handle interests
							await Promise.all(selectedInterests.map(async (interestName) => {
								const interestsRef = collection(db, 'interests');
								const q = query(interestsRef, where('name', '==', interestName));
								const querySnapshot = await getDocs(q);
				
								if (querySnapshot.empty) {
									await addDoc(collection(db, 'interests'), {
										name: interestName,
										likeCount: 1
									});
								} else {
									const interestDoc = querySnapshot.docs[0];
									await updateDoc(interestDoc.ref, {
										likeCount: increment(1)
									});
								}
							}));
				
							// Create authentication document
							const faceImageURL = await uploadFile(idFaceRef.current?.files[0], `authentication/${user.uid}/faceID`);
							const frontImageURL = await uploadFile(idFrontRef.current?.files[0], `authentication/${user.uid}/frontID`);
							const backImageURL = await uploadFile(idBackRef.current?.files[0], `authentication/${user.uid}/backID`);
				
							await setDoc(doc(db, 'authentication', user.uid), {
								userId: user.uid,
								proofOfId: faceImageURL,
								idFront: frontImageURL,
								idBack: backImageURL,
								createdAt: new Date()
							});
				
							// Clean up and redirect
							sessionStorage.clear();
							setSuccessMessage('Registration successful! Please check your email for verification.');
							setTimeout(() => {
								router.push('/login');
							}, 3000);
				
						} catch (error: any) {
							console.error('Registration failed:', error);
							setError(error.code === 'auth/email-already-in-use'
								? 'Email already in use'
								: 'Registration failed. Please try again.');
						}
					};
				
		    // Utility functions
			const handleEmailChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
				const email = e.target.value;
				setEmail(email);
				const exists = await UserService.checkUserExists(email, '');
				if (exists) {
					setEmailExistsError('This email is already registered.');
				} else {
					setEmailExistsError('');
				}
			};
		
			const handleUsernameChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
				const username = e.target.value;
				setUserName(username);
				const exists = await UserService.checkUserExists('', username);
				if (exists) {
					setUserExistsError('This username is already taken.');
				} else {
					setUserExistsError('');
				}
			};
		
			const handleContactChange = async (value: string) => {
				setPhone(value);
				if (value) {
					const exists = await UserService.checkUserExists('', '', value);
					if (exists) {
						setContactExistsError('This phone number is already registered.');
					} else {
						setContactExistsError('');
					}
				}
			};
		
			if (loading) {
				return <AnimatedLogo />;
			}
		
			if (user && user.emailVerified) {
				return <AnimatedLogo />;
			}
		
			// Component rendering
			return (
				<div className="fixed inset-0 bg-gray-100">
					<div className="absolute inset-0 bg-cover bg-center md:hidden"
						style={{
							backgroundImage: "url('/images/register/registerBackgroundImage.png')",
							backgroundSize: 'cover',
							backgroundPosition: 'center',
						}}
					/>
					<div className="absolute inset-0 hidden bg-cover bg-center md:block"
						style={{
							backgroundImage: "url('/images/register/pcRegisterBackgroundImage.png')",
						}}
					/>
					<div className="absolute inset-0 flex justify-center bg-black bg-opacity-[35%] overflow-auto">
						<div className="w-9/12 text-left sm:w-9/12 md:w-8/12 lg:w-1/2">
							<div className="flex flex-col justify-center">
								{step === 1 && (
									<FirstStep
										setUserName={setUserName}
										userNameError={userNameError}
										userExistsError={userExistsError}
										setFirstName={setFirstName}
										firstNameError={firstNameError}
										setLastName={setLastName}
										lastNameError={lastNameError}
										setGender={setGender}
										genderError={genderError}
										setEmail={setEmail}
										emailError={emailError}
										emailExistsError={emailExistsError}
										setPassword={setPassword}
										setConfirmPassword={setConfirmPassword}
										confirmPasswordError={confirmPasswordError}
										setStep={setStep}
										validateStep={validateStep1}
										passwordError={passwordError}
										setBirthday={setBirthday}
										birthdayError={birthdayError}
										handleUsernameChange={handleUsernameChange}
										handleEmailChange={handleEmailChange}
									/>
								)}
								{/* Additional step components */}
								{step === 2 && <SecondStep {...secondStepProps} />}
								{step === 2.1 && <SecondStepOptional {...secondStepOptionalProps} />}
								{step === 3 && <ThirdStep {...thirdStepProps} />}
								{step === 4 && <FourthStep {...fourthStepProps} />}
								{step === 5 && <Authentication {...authenticationProps} />}
								{step === 6 && <SixthStep {...sixthStepProps} />}
							</div>
						</div>
					</div>
				</div>
			);
		}
		
	